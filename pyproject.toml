[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ci_benchmark_tooling"
version = "0.1.0"
description = "Scripts to benchmark the performance of various CI providers"
authors = ["Guillaume RISBOURG <guillaume.risbourg@mergify.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
httpx = {extras = ["http2"], version = "^0.24.1"}
daiquiri = "^3.2.1"
pyyaml = "^6.0"
tenacity = "^8.2.2"
pymarkdownlnt = "^0.9.11"

[tool.poetry.scripts]
  dispatch-benchmark-workflows = "ci_benchmark_tooling.dispatch_benchmark_workflows:main"
  create-benchmark-report = "ci_benchmark_tooling.create_benchmark_report:main"


[tool.poetry.group.dev.dependencies]
ruff = "^0.0.270"
black = "^23.3.0"
mypy = "^1.3.0"
poethepoet = "^0.20.0"
types-pyyaml = "^6.0.12.10"

[tool.poe]
include = ["poe.toml"]

[tool.black]
target-version = ['py311']

[tool.mypy]
strict = true
warn_unreachable = true
files = ["ci_benchmark_tooling"]
show_error_codes = true

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
 "E", "W", "F", "I", "A", "B", "Q",
 "C4", "T10", "ISC", "ICN", "BLE",
 "G", "RSE", "TID", "TRY", "PLE", "UP",
 "RUF", "RET",
 "DTZ", "ARG", "TCH", "COM",
]
ignore = [
    # NOTE: line-length is up to black
    "E501",
    # NOTE: built-in shadow, interresting but to raise an error for
    # TypedDict/NamedTuple with key named like builtin, so it's useless
    "A003",
    # We want to be able to raise exceptions with a custom message
    "TRY003",
]

[tool.ruff.isort]
force-single-line = true
force-sort-within-sections = true
lines-after-imports = 2

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"
