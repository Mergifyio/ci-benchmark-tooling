# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

jobs:
  CPython - Windows x86:
    parameters:
      resource_class:
        type: string
    machine:
      image: windows-server-2019-vs2019:2022.08.1
    resource_class: << parameters.resource_class >>
    environment:
      IncludeUwp: 'true'
    steps:
      - run:
          name: Clone CPython
          command: git clone --depth 1 -b main https://github.com/python/cpython.git CPython

      # Following steps are copy/pasted from CPython's .github/workflows/build.yml
      # build_win32 job, with some paths modified
      - run:
          name: Build CPython
          command: ./CPython/PCbuild/build.bat -e -d -p Win32
      - run:
          name: Display build info
          command: ./CPython/python.bat -m test.pythoninfo
      - run:
          name: Tests
          command: ./CPython/PCbuild/rt.bat -p Win32 -d -q -uall -u-cpu -rwW --slowest --timeout=1200 -j0

  CPython - Windows x64:
    parameters:
      resource_class:
        type: string
    machine:
      image: windows-server-2019-vs2019:2022.08.1
    resource_class: << parameters.resource_class >>
    environment:
      IncludeUwp: 'true'
    steps:
      - run:
          name: Clone CPython
          command: git clone --depth 1 -b main https://github.com/python/cpython.git CPython

      # Following steps are copy/pasted from CPython's .github/workflows/build.yml
      # build_win_amd64 job, with some paths modified
      - run:
          name: Register MSVC problem matcher
          command: echo "::add-matcher::CPython/.github/problem-matchers/msvc.json"
      - run:
          name: Build CPython
          command: ./CPython/PCbuild/build.bat -e -d -p x64
      - run:
          name: Display build info
          command: ./CPython/python.bat -m test.pythoninfo
      - run:
          name: Tests
          command: ./CPython/PCbuild/rt.bat -p x64 -d -q -uall -u-cpu -rwW --slowest --timeout=1200 -j0

  CPython - Ubuntu:
    parameters:
      resource_class:
        type: string
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: << parameters.resource_class >>
    environment:
      OPENSSL_VER: 1.1.1t
      PYTHONSTRICTEXTENSIONBUILD: 1
    steps:
      - run:
          name: Clone CPython
          command: git clone --depth 1 -b main https://github.com/python/cpython.git CPython

      # Following steps are copy/pasted from CPython's .github/workflows/build.yml
      # build_ubuntu job, with some paths modified to fit the benchmark behavior.
      - run:
          name: Register gcc problem matcher
          command: echo "::add-matcher::CPython/.github/problem-matchers/gcc.json"
      - run:
          name: Install Dependencies
          command: sudo ./CPython/.github/workflows/posix-deps-apt.sh
      - run:
          name: Configure OpenSSL env vars
          command: |
            echo "export MULTISSL_DIR=$(pwd)/CPython/multissl" >> $BASH_ENV
            echo "export OPENSSL_DIR=$(pwd)/CPython/multissl/openssl/${OPENSSL_VER}" >> $BASH_ENV
            echo "export LD_LIBRARY_PATH=$(pwd)/CPython/multissl/openssl/${OPENSSL_VER}/lib" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install OpenSSL
          command: python3 CPython/Tools/ssl/multissltests.py --steps=library --base-directory $MULTISSL_DIR --openssl $OPENSSL_VER --system Linux
      - run:
          name: Setup directory envs for out-of-tree builds
          command: |
            echo "export CPYTHON_RO_SRCDIR=$(realpath -m $(pwd)/../cpython-ro-srcdir)" >> $BASH_ENV
            echo "export CPYTHON_BUILDDIR=$(realpath -m $(pwd)/../cpython-builddir)" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Create directories for read-only out-of-tree builds
          command: mkdir -p $CPYTHON_RO_SRCDIR $CPYTHON_BUILDDIR
      - run:
          name: Bind mount sources read-only
          command: sudo mount --bind -o ro $(pwd)/CPython $CPYTHON_RO_SRCDIR
      - run:
          name: Configure CPython out-of-tree
          command: |
            cd $CPYTHON_BUILDDIR
            ../cpython-ro-srcdir/configure \
              --with-pydebug \
              --with-openssl=$OPENSSL_DIR
      - run:
          name: Build CPython out-of-tree
          command: |
            cd $CPYTHON_BUILDDIR
            make -j4
      - run:
          name: Display build info
          command: |
            cd $CPYTHON_BUILDDIR
            make pythoninfo
      - run:
          name: Remount sources writable for tests
          # some tests write to srcdir, lack of pyc files slows down testing
          command: sudo mount $CPYTHON_RO_SRCDIR -oremount,rw
      - run:
          name: Tests
          command: |
            cd $CPYTHON_BUILDDIR
            xvfb-run -a -e /dev/stdout make buildbottest TESTOPTS="-j4 -uall,-cpu"

  CPython - MacOS:
    parameters:
      resource_class:
        type: string
    macos:
      xcode: 14.3.1
    resource_class: << parameters.resource_class >>
    environment:
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      PYTHONSTRICTEXTENSIONBUILD: 1
    steps:
      - run:
          name: Clone CPython
          command: git clone --depth 1 -b main https://github.com/python/cpython.git CPython

      # Following steps are copy/pasted from CPython's .github/workflows/build.yml
      # build_macos job, with some paths modified
      - run:
          name: Install Homebrew dependencies
          command: brew install pkg-config openssl@1.1 xz gdbm tcl-tk
      - run:
          name: Configure CPython
          command: |
            CFLAGS="-I$(brew --prefix gdbm)/include -I$(brew --prefix xz)/include" \
            LDFLAGS="-L$(brew --prefix gdbm)/lib -I$(brew --prefix xz)/lib" \
            PKG_CONFIG_PATH="$(brew --prefix tcl-tk)/lib/pkgconfig" \
            ./CPython/configure \
              --with-pydebug \
              --prefix=/opt/python-dev \
              --with-openssl="$(brew --prefix openssl@1.1)"
      - run:
          name: Build CPython
          command: make -j4
      - run:
          name: Display build info
          command: make pythoninfo
      - run:
          name: Tests
          command: make buildbottest TESTOPTS="-j4 -uall,-cpu"

  Cores infos - Ubuntu:
    parameters:
      resource_class:
        type: string
    machine:
      image: ubuntu-2204:2023.04.2
    resource_class: << parameters.resource_class >>
    steps:
      - run:
          name: Display total number of cores
          command: lscpu

  Cores infos - Windows:
    parameters:
      resource_class:
        type: string
    machine:
      image: windows-server-2019-vs2019:2022.08.1
    resource_class: << parameters.resource_class >>
    steps:
      - run:
          name: Display total number of cores
          command: wmic cpu get NumberOfCores,NumberOfLogicalProcessors


  Cores infos - MacOS:
    parameters:
      resource_class:
        type: string
    macos:
      xcode: 14.3.1
    resource_class: << parameters.resource_class >>
    steps:
      - run:
          name: Display total number of cores
          command: system_profiler SPHardwareDataType


workflows:
  Benchmark CPython:
    jobs:
      - CPython - Ubuntu:
          matrix:
            parameters:
              #resource_class: [medium, large, xlarge, 2xlarge]
              resource_class: [medium, large]
      - CPython - Windows x86:
          matrix:
            parameters:
              #resource_class: [windows.medium, windows.large, windows.xlarge, windows.2xlarge]
              resource_class: [windows.medium, windows.large]
      - CPython - Windows x64:
          matrix:
            parameters:
              #resource_class: [windows.medium, windows.large, windows.xlarge, windows.2xlarge]
              resource_class: [windows.medium, windows.large]
      - CPython - MacOS:
          matrix:
            parameters:
              #resource_class: [macos.m1.medium.gen1, macos.x86.medium.gen2, xmacos.m1.large.gen1, macos.x86.metal.gen1]
              resource_class: [macos.m1.medium.gen1, macos.x86.medium.gen2]

  Machines cores info:
    jobs:
      - Cores infos - Ubuntu:
          matrix:
            parameters:
              #resource_class: [medium, large, xlarge, 2xlarge]
              resource_class: [medium, large]
      - Cores infos - Windows:
          matrix:
            parameters:
              #resource_class: [windows.medium, windows.large, windows.xlarge, windows.2xlarge]
              resource_class: [windows.medium, windows.large]
      - Cores infos - MacOS:
          matrix:
            parameters:
              #resource_class: [macos.m1.medium.gen1, macos.x86.medium.gen2, xmacos.m1.large.gen1, macos.x86.metal.gen1]
              resource_class: [macos.m1.medium.gen1, macos.x86.medium.gen2]
